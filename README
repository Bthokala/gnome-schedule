gnome-schedule
--------------

	o. See the file COPYING for the license.
	o. See the AUTHORS file for the authors of this tool
	o. See the INSTALL file for information about installing this tool
	o. Checkout the doc/ directory for user documentation

Dependencies
------------

 Gnome Schedule needs
 
	o. at,  batch,  atq, atrm, queue
	o. crontab
	o. Python
	o. PyGTK >= 2.3
	o. Python GConf

Support
-------

  o. Mailinglists: You can talk to the developers and some other users
     of gnome-schedule here:
 
	o. http://lists.sourceforge.net/mailman/listinfo/gnome-schedule-users

  o. An unstable PyGTK? Why?!

  The reason why we are using an unstable version of PyGTK is because
  the stable version of PyGTK is to incomplete for serious GNOME -and
  Gtk >= 2.4 application development. You can try proving me wrong... 
  However, I won't listen to your whining. So to answer the question 
  that will probably get asked most: No we will not backport to a stable 
  version of PyGTK. You are free to wait for the major distributions to
  include PyGTK >= 2.4 or install an unstable version of PyGTK.

   Note that if you don't install PyGTK using your standard prefix, you
   will have to use something like this before running the ./autogen.sh
   and/or ./configure scripts:
 
   export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig

   For distributors: A script $prefix/bin/gnome-schedule. It's generated
   from the src/gnome-schedule.in file. It will also set the PYTHONPATH
   evironment variable correct for the session that will run the python
   script. This way it's possible to both compile and run the application
   without the need for globally registering the location of the PyGTK
   libraries.


INSTALL from source while PyGTK is not in your default prefix
-------------------------------------------------------------
o. Because some people dislike the fact that manually compiled 
   applications tamper with their distribution which is managed by the
   packaging system in use. We understand this and therefor made it
   possible to install the application outside of any default prefix.

o. If you want to use the sources pulled from the CVS server, you will have
   to do what developers have to do and install packages and / or cvs 
   modules like automake-1.7 and gnome-common. Alongside you will need to
   install the latest version PyGTK. This is the module pygtk in cvs.

o. The following script will install gnome-schedule on a system that has
   Python and automake-1.7 and some tools like gmake installed.

     export CVSROOT=":pserver:anonymous@anoncvs.gnome.org:/cvs/gnome" 
     cvs login
     # Password: [press enter]
     cvs -z3 checkout gnome-common gnome-schedule pygtk
     pushd gnome-common
     ./autogen.sh --prefix=/usr
     make
     make install
     popd
     pushd pygtk
     ./autogen.sh --prefix=/usr/local
     make
     make install
     popd
     pushd gnome-schedule 
     export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig
     ./autogen.sh --prefix=/usr/local
     make
     make install
     # and use .. to start gnome-schedule:

     /usr/local/bin/gnome-schedule

     # You can read the script to know how to start the Python-script
     # manually. If PyGTK is not installed in your default prefix,
     # you, in case you are planning not to use the script, would have
     # to set the PYTHONPATH environment variable first! The generated
     # script, however, will do all this for you (if you use the 
     # script).

Important notes
---------------
If you have previous records in at, gnome-schedule may have problems reading them. 
They are marked as DANGROUS PARSE in the list if a unsecure method was used. This will not damage
the record, and if you open one pressing cancel in the script editor will not change anything.

Some comments right after existing records in crontab may return weird results for title and icon, this should not damage anything.


Compiling and HACKING
---------------------

  GNOME Schedule is (being) written using the programming language Python
  and uses the PyGTK and Python-GConf bindings. No we are not planning
  to rewrite the tool in Perl just so that you can prove that Perl can
  do the same thing. To be honest, that would be a silly, stupid and 
  idiot-only thing to do. So don't even try thinking about asking. I 
  even think Larry Wall would agree with me on this one. You probably
  don't know who Larry Wall is, else you would not be thinking about
  asking the question (in case you where thinking about asking it).

  Anyway, for the Slashdot-I-ONLY-Love-Perl type of nitwits: If you're
  trying to look smart by saying how much Python sucks, try proving it
  to me by coding in stead of whining. 

  You can talk to the developers of gnome-schedule about development
  related issues here:

	o. http://lists.sourceforge.net/mailman/listinfo/gnome-schedule-devel

  To compile GNOME Schedule from CVS you will also need

	o. A CVS client
	o. autoconf and the other auto* tools (version >= 1.7)
	o. gnome-common which you can pull from the cvs.gnome.org
  	o. You can get the latest version of PyGTK from cvs.gnome.org.
	o. You will need the latest version of PyGTK to get the version
	   in CVS compiled.

  To make contributions you should first read

	o. HACKING
	o. README.cvs
	o. AUTHORS
	o. The source code itself :-)

  To help with translations

	o. Check out the po/ directory. You can use gTranslator and
	   the other intl tools for translations. You should contact
	   the GNOME Translation team as they are the responsible
	   organisation for the translation of the GNOME desktop
	o. Other than only the generated po-files you should also
	   check out the file src/lang.py


Conclusions
-----------

o. Using this document we have showed that we are dedicated to getting
   things working while the main dependency is an unstable Python
   library (PyGTK).

o. Therefor we don't expect much whining from people who would love us 
   to code against the stable tree of PyGTK while this tree being 
   incapable of giving us the features we need.

o. We DID documented every damn possible situation and even guide you
   through the process of installing PyGTK in an non-standard prefix
   which makes sure the library will NOT tamper with your current
   installation.

o. We know that even IF you DID installed PyGTK using the default
   prefix (/usr) that distributions like Fedora Core 2 will still work
   perfectly (it will show you deprecation warnings on the console
   when launching most of the system-config-* tools, but afaik they
   all work using the in-future deprecated PyGTK API). This means yet 
   another reason not to whine about it.

o. All this makes it absolutely impossible for l33t uber h4ckers to 
   still have a valid reason to whine about our decision to depend on a
   unstable PyGTK library. Yeah, it's virtuall impossible.


SO DON'T DO IT

